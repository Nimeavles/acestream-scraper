/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/channels/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of channels, optionally filtered by search term */
        get: operations["list_channels"];
        put?: never;
        /** Add a new channel */
        post: operations["create_channel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/check-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start background check for all channels */
        post: operations["check_all_channels_status"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channel_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The channel identifier */
                channel_id: string;
            };
            cookie?: never;
        };
        /** Get details for a specific channel */
        get: operations["get_channel"];
        put?: never;
        post?: never;
        /** Delete a channel */
        delete: operations["delete_channel"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channel_id}/check-status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The channel identifier */
                channel_id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check online status for a specific channel */
        post: operations["check_channel_status"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/ace_engine_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Acestream Engine URL */
        put: operations["update_ace_engine_url"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/acestream_status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Acestream Engine status */
        get: operations["get_acestream_status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/acexy_status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Acexy status */
        get: operations["get_acexy_status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/addpid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get whether to add PID parameter to URLs */
        get: operations["get_addpid"];
        /** Update whether to add PID parameter to URLs */
        put: operations["update_addpid"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/base_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update base URL for acestream links */
        put: operations["update_base_url"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/migrate_config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Migrate settings from config
         * @description json to the database.
         */
        post: operations["migrate_config"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/rescrape_interval": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current URL rescrape interval */
        get: operations["get_rescrape_interval"];
        /** Update URL rescrape interval */
        put: operations["update_rescrape_interval"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/setup_completed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark setup as completed */
        put: operations["mark_setup_completed"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get system health status */
        get: operations["health_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/channels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all channels suitable for playlist generation */
        get: operations["get_playlist_channels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/m3u": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get M3U playlist of all channels */
        get: operations["get_m3u_playlist"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get application statistics including URL and channel information */
        get: operations["get_stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/urls/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all URLs */
        get: operations["list_urls"];
        put?: never;
        /** Add a new URL to scrape */
        post: operations["create_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/urls/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Queue all URLs for refreshing */
        post: operations["refresh_all_urls"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/urls/{url}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The URL to manage */
                url: string;
            };
            cookie?: never;
        };
        /** Get details for a specific URL */
        get: operations["get_url"];
        /** Update a URL's properties */
        put: operations["update_url"];
        post?: never;
        /** Delete a URL and its associated channels */
        delete: operations["delete_url"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/urls/{url}/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The URL to refresh */
                url: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Queue a specific URL for refreshing */
        post: operations["refresh_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warp/connect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Connect to WARP */
        post: operations["connect_warp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warp/disconnect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disconnect from WARP */
        post: operations["disconnect_warp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warp/license": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a WARP license key */
        post: operations["register_warp_license"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warp/mode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set the WARP mode */
        put: operations["set_warp_mode"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warp/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the current status of WARP */
        get: operations["get_warp_status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Stats: {
            /** @description List of all tracked URLs */
            urls?: components["schemas"]["URLStats"][];
            /** @description Total number of channels */
            total_channels?: number;
            /** @description Number of channels with status checked */
            channels_checked?: number;
            /** @description Number of online channels */
            channels_online?: number;
            /** @description Number of offline channels */
            channels_offline?: number;
            /** @description Base URL for playlist generation */
            base_url?: string;
            /** @description URL of the Acestream Engine */
            ace_engine_url?: string;
            /** @description Hours between automatic rescans */
            rescrape_interval?: number;
            /** @description Whether to add PID parameter to URLs */
            addpid?: boolean;
            /** @description Status of the background task manager */
            task_manager_status?: string;
        };
        URLStats: {
            /** @description URL being scraped */
            url?: string;
            /** @description Current status of the URL */
            status?: string;
            /**
             * Format: date-time
             * @description When the URL was last processed
             */
            last_processed?: string;
            /** @description Number of channels from this URL */
            channel_count?: number;
            /** @description Whether this URL is enabled */
            enabled?: boolean;
            /** @description Number of consecutive errors */
            error_count?: number;
            /** @description Last error message, if any */
            last_error?: string;
        };
        BaseURL: {
            /** @description Base URL for acestream links */
            base_url: string;
        };
        AceEngineURL: {
            /** @description URL for Acestream Engine */
            ace_engine_url: string;
        };
        RescrapeInterval: {
            /** @description Hours between automatic rescans */
            hours: number;
        };
        AcexyStatus: {
            /** @description Whether Acexy is enabled */
            enabled?: boolean;
            /** @description Whether Acexy is available */
            available?: boolean;
            /** @description Status message */
            message?: string;
            /** @description Number of active streams */
            active_streams?: number;
        };
        SetupCompleted: {
            /** @description Setup completion status */
            completed: boolean;
        };
        AcestreamStatus: {
            /** @description Whether Acestream Engine is enabled */
            enabled?: boolean;
            /** @description Whether Acestream Engine is available */
            available?: boolean;
            /** @description Status message */
            message?: string;
            /** @description Acestream Engine version */
            version?: string;
            /** @description Platform */
            platform?: string;
            /** @description Whether playlist is loaded */
            playlist_loaded?: boolean;
            /** @description Whether engine is connected to network */
            connected?: boolean;
        };
        AddPid: {
            /** @description Whether to add PID parameter to URLs */
            addpid: boolean;
        };
        ChannelInput: {
            /** @description Acestream Channel ID */
            id: string;
            /** @description Channel name */
            name: string;
        };
        Channel: {
            /** @description Acestream Channel ID */
            id?: string;
            /** @description Channel name */
            name?: string;
            /** @description Channel status */
            status?: string;
            /**
             * Format: date-time
             * @description When the channel was last processed
             */
            last_processed?: string;
            /** @description Whether the channel is online */
            is_online?: boolean;
            /**
             * Format: date-time
             * @description When the channel status was last checked
             */
            last_checked?: string;
            /** @description Error message from last check */
            check_error?: string;
            /** @description Channel group/category */
            group?: string;
        };
        StatusCheckResult: {
            /** @description Acestream Channel ID */
            id?: string;
            /** @description Channel name */
            name?: string;
            /** @description Whether the channel is online */
            is_online?: boolean;
            /** @description Channel status: online/offline */
            status?: string;
            /**
             * Format: date-time
             * @description When the channel status was checked
             */
            last_checked?: string;
            /** @description Error message, if any */
            error?: string;
        };
        URLInput: {
            /** @description URL to scrape */
            url: string;
        };
        URL: {
            /** @description URL being scraped */
            url?: string;
            /** @description Current status of the URL */
            status?: string;
            /**
             * Format: date-time
             * @description When the URL was last processed
             */
            last_scraped?: string;
            /** @description Whether the URL is enabled */
            enabled?: boolean;
            /** @description Number of consecutive errors */
            error_count?: number;
            /** @description Last error message, if any */
            last_error?: string;
        };
        URLUpdate: {
            /** @description Whether the URL is enabled */
            enabled?: boolean;
        };
        HealthStatus: {
            /** @description System health status */
            status: string;
            /** @description Application status */
            app: boolean;
            /** @description Database status */
            database: boolean;
            /** @description Acexy service status (if enabled) */
            acexy?: boolean;
            /** @description Acestream Engine status (if enabled) */
            acestream?: boolean;
            /** @description Task manager status */
            task_manager?: boolean;
            /** @description Additional status details */
            details?: Record<string, never>;
        };
        WarpStatus: {
            /** @description Whether the WARP daemon is running */
            running?: boolean;
            /** @description Whether WARP is connected */
            connected?: boolean;
            /** @description Current WARP mode */
            mode?: string;
            /** @description Account type: free/premium/team */
            account_type?: string;
            /** @description Current IP address when connected */
            ip?: string;
            /** @description Whether WARP is enabled in the container */
            enabled?: boolean;
            /** @description Cloudflare trace information */
            cf_trace?: Record<string, never>;
        };
        ModeInput: {
            /** @description WARP mode to set: warp/dot/proxy/off */
            mode: string;
        };
        LicenseInput: {
            /** @description WARP license key to register */
            license_key: string;
        };
    };
    responses: {
        /** @description When a mask can't be parsed */
        ParseError: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description When any error occurs on mask */
        MaskError: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_channels: {
        parameters: {
            query?: {
                /** @description Filter channels by name */
                search?: string;
                /** @description Page number */
                page?: number;
                /** @description Items per page */
                per_page?: number;
                /** @description Filter by status */
                status?: string;
            };
            header?: {
                /** @description An optional fields mask */
                "X-Fields"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Channel"][];
                };
            };
        };
    };
    create_channel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChannelInput"];
            };
        };
        responses: {
            /** @description Channel created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Channel already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    check_all_channels_status: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Status check initiated */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_channel: {
        parameters: {
            query?: never;
            header?: {
                /** @description An optional fields mask */
                "X-Fields"?: string;
            };
            path: {
                /** @description The channel identifier */
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Channel"];
                };
            };
            /** @description Channel not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_channel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The channel identifier */
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Channel deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Channel not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    check_channel_status: {
        parameters: {
            query?: never;
            header?: {
                /** @description An optional fields mask */
                "X-Fields"?: string;
            };
            path: {
                /** @description The channel identifier */
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusCheckResult"];
                };
            };
            /** @description Channel not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_ace_engine_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AceEngineURL"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_acestream_status: {
        parameters: {
            query?: never;
            header?: {
                /** @description An optional fields mask */
                "X-Fields"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcestreamStatus"];
                };
            };
        };
    };
    get_acexy_status: {
        parameters: {
            query?: never;
            header?: {
                /** @description An optional fields mask */
                "X-Fields"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcexyStatus"];
                };
            };
        };
    };
    get_addpid: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_addpid: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddPid"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_base_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BaseURL"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    migrate_config: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_rescrape_interval: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_rescrape_interval: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RescrapeInterval"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    mark_setup_completed: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetupCompleted"];
            };
        };
        responses: {
            /** @description Setup status updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    health_check: {
        parameters: {
            query?: never;
            header?: {
                /** @description An optional fields mask */
                "X-Fields"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthStatus"];
                };
            };
        };
    };
    get_playlist_channels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_m3u_playlist: {
        parameters: {
            query?: {
                /** @description Whether to refresh the playlist before returning */
                refresh?: boolean;
                /** @description Filter channels by name */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_stats: {
        parameters: {
            query?: never;
            header?: {
                /** @description An optional fields mask */
                "X-Fields"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Stats"];
                };
            };
        };
    };
    list_urls: {
        parameters: {
            query?: never;
            header?: {
                /** @description An optional fields mask */
                "X-Fields"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["URL"][];
                };
            };
        };
    };
    create_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["URLInput"];
            };
        };
        responses: {
            /** @description URL created and queued for processing */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description URL already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refresh_all_urls: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description URLs queued for refreshing */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_url: {
        parameters: {
            query?: never;
            header?: {
                /** @description An optional fields mask */
                "X-Fields"?: string;
            };
            path: {
                /** @description The URL to manage */
                url: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["URL"];
                };
            };
            /** @description URL not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The URL to manage */
                url: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["URLUpdate"];
            };
        };
        responses: {
            /** @description URL updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description URL not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The URL to manage */
                url: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description URL deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description URL not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refresh_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The URL to refresh */
                url: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description URL queued for refreshing */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description URL is disabled */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description URL not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    connect_warp: {
        parameters: {
            query?: never;
            header?: {
                /** @description An optional fields mask */
                "X-Fields"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Connected successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description WARP is not enabled */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Connection failed */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    disconnect_warp: {
        parameters: {
            query?: never;
            header?: {
                /** @description An optional fields mask */
                "X-Fields"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Disconnected successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description WARP is not enabled */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Disconnection failed */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    register_warp_license: {
        parameters: {
            query?: never;
            header?: {
                /** @description An optional fields mask */
                "X-Fields"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LicenseInput"];
            };
        };
        responses: {
            /** @description License registered successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description License key not specified */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description WARP is not enabled */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to register license */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    set_warp_mode: {
        parameters: {
            query?: never;
            header?: {
                /** @description An optional fields mask */
                "X-Fields"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModeInput"];
            };
        };
        responses: {
            /** @description Mode set successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid mode specified */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description WARP is not enabled */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to set mode */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_warp_status: {
        parameters: {
            query?: never;
            header?: {
                /** @description An optional fields mask */
                "X-Fields"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarpStatus"];
                };
            };
        };
    };
}
